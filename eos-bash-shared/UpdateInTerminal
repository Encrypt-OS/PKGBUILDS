#!/bin/bash

echo2()   { echo "$@" >&2 ; }
printf2() { printf "$@" >&2 ; }
DIE()     { echo2 "$progname: error: $1" ; Usage ; exit 1 ; }
WARN()    { echo2 "====> $progname: warning: $1" ; }

translations_dir=/usr/share/encryptos/scripts  # needed in translations.bash

source $translations_dir/eos-script-lib-yad || {
    DIE "$translations_dir/eos-script-lib-yad not found!"
}
source $translations_dir/translations.bash || {
    DIE "$translations_dir/translations.bash not found!"
}

export -f eos_yad_terminal
export -f eos_yad_RunCmdTermBash

GrubCheckFwsetup() {
    if [ -d /sys/firmware/efi ] ; then              # have uefi
        if [ -x /usr/bin/grub-mkconfig ] ; then     # have grub
            local updates="$1"
            if [ -n "$(echo "$updates" | grep -w grub)" ] ; then
                local version_requiring_fwsetup="2:2.06.r322.gd9b4638c5-1"
                local curver="$(pacman -Q grub 2>/dev/null | awk '{print $NF}')"
                if [ $(vercmp "$curver" "$version_requiring_fwsetup") -lt 0 ] ; then
                    cat <<EOF >&2
==> IMPORTANT: you will have to run grub-install BEFORE reboot!
    Example:
        sudo grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=EncryptOS-grub
    See https://forum.endeavouros.com/t/the-latest-grub-package-update-needs-some-manual-intervention
EOF
                fi
            fi
        fi
    fi
}

Checkupdates() {
    local updates
    local retval

    updates=$(checkupdates)
    retval=$?

    echo "$updates"
    updates="$(echo "$updates" | awk '{print $1}')"

    GrubCheckFwsetup "$updates"

    case "$retval" in
        0)
            eos-kernel-nvidia-update-check $(echo "$updates" | awk '{print $1}') || {
                read -p "Stop upgrade (Y/n)? " >&2
                case "$REPLY" in
                    "" | [Yy]*) exit 1 ;;
                esac
            }
	    ;;
    esac
    return $retval
}

Options() {
    local pp
    for pp in "$@" ; do
        case "$pp" in
            --noup) checkArchEos=no ;;
            --noaur) checkAur=no ;;
            --lang=*) lang="${pp#*=}" ;;
            --nt) new_terminal=yes ;;
            --sync) allow_sync=yes ;;
            --help | -h) Usage ; return 1 ;;
            -*) DIE "unsupported option '$pp'" ;;
            *)  DIE "unsupported parameter '$pp'" ;;
        esac
        if [ "$pp" != "--nt" ] ; then
            new_terminal_options+=" $pp"
        fi
    done
}

Usage() {
    cat <<EOF
Usage: $progname [options]
Options:
    --noup     Don't check $upname updates.
    --noaur    Don't check AUR updates.
    --nt       Check updates in a new terminal window.
    --sync     Run program 'sync' afterwards if updates were detected.
EOF
}

Main() {
    local checkArchEos=yes
    local checkAur=yes
    local lang=""
    local progname="$(basename "$0")"
    local upname="Arch & Encrypt-OS"
    local aur_helper="$EOS_AUR_HELPER"
    local new_terminal=no
    local new_terminal_options=""  # skips only --nt
    local updates_found=no
    local allow_sync=no

    [ -n "$aur_helper" ] || aur_helper=yay

    Options "$@" || return

    if [ "$new_terminal" = "yes" ] ; then
        eos_yad_RunCmdTermBash "$progname $new_terminal_options"
        return
    fi

    _init_translations "$lang"         # other parameters as defaults

    if [ "$checkArchEos" = "yes" ] ; then
        echo2 "$upname $(ltr updt_update_check):"
        echo2 ":: $(ltr updt_searching) $upname $(ltr updt_for_updates)..."
        Checkupdates
        case "$?" in
            0) $EOS_ROOTER 'pacman -Syu' ; updates_found=yes ;;
            1) DIE "$(echo Checkupdates: $(ltr updt_failure) | sed 's|&#33;$|!|')" ;;  # sed: exclamation mark conversion
            2) echo2 " $(ltr updt_nothing_todo)" ;;
        esac
        [ "$checkAur" = "yes" ] && echo2 ""
    fi

    if [ "$checkAur" = "yes" ] ; then
        echo2 "AUR $(ltr updt_update_check):"
        which $aur_helper >& /dev/null && {
            $aur_helper -Sua
            updates_found=yes
        } || {
            echo2 ":: Warning: no AUR helper found."
            echo2 ":: Please check configuration file /etc/eos-script-lib-yad.conf,"
            echo2 ":: and check that the configured AUR helper is installed."
        }
    fi

    if [ "$updates_found" = "yes" ] ; then
        if [ "$allow_sync" = "yes" ] || [ "$SyncAfterUpdate" = "yes" ] ; then  # SyncAfterUpdate is an environment variable
            echo2 "==> Running 'sync' after update."
            sync
        fi
    fi
}

Main "$@"
