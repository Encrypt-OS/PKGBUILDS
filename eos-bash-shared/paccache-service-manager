#!/bin/bash
#
# Simple service manager for pacman cache cleaner.
#
# Requires packages:
#   pacman-contrib   (for paccache)
#   yad              (for yad)
#   polkit           (for pkexec)
#

source /usr/share/encryptos/scripts/eos-script-lib-yad || exit 1

export -f eos_yad

DIE() {
    local msg="$1"
    shift
    echo "Error: $msg" | eos_yad --text-info --image=error --title="$progname error" \
                                 --wrap --width=500 --height=300 --button=yad-quit:1 "$@"
    exit 1
}

GetCurrentValues() {
    local t="$timer"
    local s="$service"

    if [ ! -r $s ] ; then
        # service is only under /usr/lib/... so get current values from there
        t="$dir2/$pt"
        s="$dir2/paccache.service"

        local why="Is pacman-contrib installed?"
        test -r $t || DIE "sorry, $t does not exist. $why"
        test -r $s || DIE "sorry, $s does not exist. $why"
    fi

    current_period="$(   grep "^OnCalendar=" $t | cut -d '=' -f 2)"
    current_keepcount="$(grep "^ExecStart="  $s | awk '{print $NF}')"
    current_delete_uninstalled=FALSE

    # ad hoc check for the 'keepcount' value
    case "$current_keepcount" in
        -r) current_keepcount=3 ;;                        # original value
        -rk*)
            current_keepcount="${current_keepcount:3}"    # value after using this app
            [ -z "$current_keepcount" ] && DIE "file '$s': paccache option 'k' requires an argument."
            ;;
        *) DIE "sorry, variable 'keepcount' has value '$current_keepcount' from file '$service', cannot parse it." --width=800 ;;
    esac
}

Usage() {
    cat <<EOF
Usage: $progname [options]

Options:
    --defaults         Enable manager with default values (run $period, keep latest $keepcount).
    -v, --verbose      Increase verbosity (= see more terminal output).
    -h, --help         This help.
EOF
    [ -n "$1" ] && exit "$1"
}

AddCommand() {
    local command="$1"

    cmds+=" ; $command"
    if [ "$verbose" = "yes" ] ; then
        echo "$command" >> $vfile
    fi
}

_paccache_cleaner_manager()
{
    local progname=paccache-service-manager
    local dir=/etc/systemd/system
    local dir2=/usr/lib/systemd/system         # current values may be only here...
    local service=$dir/paccache.service
    local timer=$dir/paccache.timer
    local current_period
    local current_keepcount
    local current_delete_uninstalled
    local pt="paccache.timer"
    local cmd_yad
    local cmds=":" cmds2=() cmd_period cmd_ruk=""
    local xx
    local period_vals=""
    local txt
    local image=drive-harddisk # disk-utility
    local result=""
    local field_nr=1
    local indent="<tt>  </tt>"
    local du="$(LANG=C /usr/bin/du --si -s /var/cache/pacman/pkg | /usr/bin/awk '{print $1}' | sed 's|\([KMGT]\)$| \1B|')"
    local df="$(LANG=C /usr/bin/df --si | /usr/bin/grep -w /     | /usr/bin/awk '{print $4}' | sed 's|\([KMGT]\)$| \1B|')"
    local options=""
    local defaults=no
    local period=weekly keepcount=2 delete_uninstalled=FALSE
    local first_time=no
    local verbose=no
    local vfile=""     # temporary file for showing all commands in verbose mode

    if [ ! -r $service ] ; then
        first_time=yes
    fi

    case "$1" in
        -v | --verbose) options+=" -v"
                        options="${options# }"   # drop leading space
                        verbose=yes
                        vfile="$(mktemp)"
                        ;;
        -h | --help)    Usage 0
                        ;;
        --defaults)     defaults=yes
                        ;;
    esac

    GetCurrentValues

    if [ "$defaults" = "no" ] ; then
        txt="<b>Modifies the service that cleans up pacman cache periodically.\n"
        txt+="Below you'll see settings and their current values.\n\n"
        txt+="Current status:\n"
        txt+="${indent}Package cache usage: $du\n"
        txt+="${indent}Free space on disk: $df</b>\n"
        txt+="\n"

        # List possible period values, and set the default
        for xx in daily weekly monthly ; do
            test -n "$period_vals" && period_vals+="!"           # separator
            test "$xx" = "$current_period" && period_vals+="^"   # default
            period_vals+="$xx"
        done

        cmd_yad=(
            eos_yad --form --width=500 --image=$image
            --title='Pacman cache cleaner service manager' 
            --text="$txt" 
            --field='Cleaning period':CB                                   "$period_vals" 
            --field='Number of package versions to keep':NUM               "$current_keepcount"
            --field='Remove uninstalled but still cached packages now':CHK "$current_delete_uninstalled"
        )

        result="$("${cmd_yad[@]}")" ; [ -n "$result" ] || return    # package kde-gtk-config should remove possible gtk related yad warnings

        # New values
        period="$(            echo "$result" | cut -d '|' -f $field_nr)" ; ((++field_nr))
        keepcount="$(         echo "$result" | cut -d '|' -f $field_nr)" ; ((++field_nr))
        delete_uninstalled="$(echo "$result" | cut -d '|' -f $field_nr)" ; ((++field_nr))
    fi

    # Build the final paccache command list.

    # Clean up cache now and periodically

    if [ "$delete_uninstalled" = "TRUE" ] ; then
        cmd_ruk="paccache $options -ruk0"
    fi

    if [ "$keepcount $period $delete_uninstalled" != "$current_keepcount $current_period $current_delete_uninstalled" ] || [ "$first_time" = "yes" ] ; then
        cmd_period="paccache $options -rk$keepcount"

        if [ ! -r $service ] ; then
            AddCommand "cp $dir2/$pt $timer"
            AddCommand "cp $dir2/paccache.service $service"
        fi
        # Allow ExecStart line with both /usr/bin/paccache or just paccache.
        AddCommand "sed -i $service -e 's|^ExecStart=paccache .*$|ExecStart=$cmd_period|' -e 's|^ExecStart=/usr/bin/paccache .*$|ExecStart=$cmd_period|'"
        AddCommand "sed -i $timer -e 's|^OnCalendar=.*$|OnCalendar=$period|'"
        AddCommand "systemctl enable --now $pt"
        AddCommand "systemctl daemon-reload"
    fi
    if [ -n "$cmd_ruk" ] ; then
        AddCommand "$cmd_ruk"
    fi

    # Execute the command list.

    if [ "$cmds" != ":" ] ; then
        if [ "$verbose" = "yes" ] ; then
            pkexec bash -c "cat '$vfile' ; $cmds"
            rm -f "$vfile"
        else
            pkexec bash -c "$cmds"
        fi
    else
        echo "No change to settings."
    fi
}

_paccache_cleaner_manager "$@"
