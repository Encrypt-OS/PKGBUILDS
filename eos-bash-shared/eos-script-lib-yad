#!/bin/bash
#
# Encrypt-OS bash scripts "library". Functions using 'yad'.
#
# - ALL FUNCTIONS HERE START WITH "eos_yad_" AND ARE EXPORTED.
# - NO GLOBAL VARIABLES ARE USED NOR PROVIDED.
#
# User MUST declare the following exports in the *using* bash code:
#
# export -f eos_yad
# export -f eos_yad_terminal
# export -f eos_yad_check_internet_connection
# export -f eos_yad_GetArgVal
# export -f eos_yad_RunCmdTermBash
# export -f eos_yad_problem
# export -f eos_yad_DIE
# export -f eos_yad_WARN
#
# export -f eos_yad__detectDE
# export -f eos_yad_GetDesktopName
# export -f eos_GetArch
# export -f eos_select_browser
# export -f eos_yad_nothing_todo
#
# The two last functions above do not use yad.
#
# shellcheck disable=SC1090      # Don't show warnings on sourceing via a variable

source /etc/eos-script-lib-yad.conf      # for EOS_ROOTER and other configs

export EOS_WICON=/usr/share/Encrypt-OS/Encrypt-OS-icon.png
export EOS_YAD_STARTER_CMD="/usr/bin/yad --window-icon=$EOS_WICON"

eos_yad() {
    GDK_BACKEND=x11 $EOS_YAD_STARTER_CMD "$@"
}

translations_dir=/usr/share/Encrypt-OS/scripts  # needed in translations.bash
source $translations_dir/translations.bash || {
    echo "$translations_dir/translations.bash not found!" >&2
    exit 1
}

eos_GetArch() {
    local arch; arch="$(/usr/bin/uname -m)"
    case "$arch" in
        armv7* | aarch64) arch=armv7h ;;
    esac
    printf "%s" "$arch"
}

eos_GetProgName() { /usr/bin/basename "$0" ; }

eos_select_browser() {
    # Select an existing browser.
    # User may export a variable _WELCOME_BROWSER to use the preferred browser.
    # Additionally, variable _WELCOME_BROWSER_OPTIONS may include browser options.

    if [ -n "$_WELCOME_BROWSER" ] ; then
        if [ -n "$_WELCOME_BROWSER_OPTIONS" ] ; then
            echo "$_WELCOME_BROWSER $_WELCOME_BROWSER_OPTIONS"
        else
            echo "$_WELCOME_BROWSER"
        fi
        return
    fi

    local browser
    for browser in firefox xdg-open exo-open chromium vivaldi-stable opera ; do
        if (/usr/bin/which "$browser" >& /dev/null) ; then
            echo "$browser"
            return
        fi
    done
    eos_yad_WARN "${FUNCNAME[0]}: cannot find a browser"
}

eos_notification() {
    local icon="$1"
    local urgency="$2"        # low, normal, critical
    local expiretime="$3"
    local appname="$4"
    local summary="$5"
    local body="$6"
    [ -n "$urgency" ] || urgency=normal

    local cmd=(
        notify-send
        --icon="$icon"
        --urgency="$urgency"
        --expire-time="$expiretime"
        --app-name="appname"
        "$summary"
	"$body"
    )
    "${cmd[@]}"
}

eos_yad_terminal() {
    local conf=/etc/eos-script-lib-yad.conf
    if [ -r $conf ] ; then
        source $conf
        if [ -n "$EOS_YAD_TERMINAL" ] ; then
            if [ -x /usr/bin/"$EOS_YAD_TERMINAL" ] || [ -x "$EOS_YAD_TERMINAL" ] ; then
                echo "$EOS_YAD_TERMINAL"
                return
            fi
            echo "Sorry, terminal program '$EOS_YAD_TERMINAL' is not available. Please check your configuration file $conf." | \
                eos_yad --text-info --title=Warning --height=100 --width=500 --wrap --button=yad-ok:0
        fi
    fi

    # Show a terminal that is capable of supporting option -e properly. Empty if not found.
    # Requires: yad
    #
    # These terminal programs are known not to work with this program:
    #     - putty
    # The following terminals are known to work:
    local suitable_terminals=(
        xfce4-terminal
        konsole
        gnome-terminal
        mate-terminal
        lxterminal
        deepin-terminal
        terminator
        qterminal
        alacritty
        tilix
        termite
        xterm
        kitty
        terminology
        sakura
    )
    local eos_terminal_prog=""
    local xx

    for xx in "${suitable_terminals[@]}" ; do
        if [ -x "/usr/bin/$xx" ] ; then
            eos_terminal_prog="/usr/bin/$xx"
            echo "$eos_terminal_prog"
            return 0
        fi
    done

    printf "%s\n    %s\n%s" \
           "Sorry, none of the terminal programs:" \
           "${suitable_terminals[*]}" \
           "is installed. Some features may not work as expected." \
        | eos_yad --text-info \
                  --title="Warning" --height=200 --width=700 --wrap --button=yad-ok:0
    return 1
}

eos_yad_check_internet_connection() {
    local verbose="$1"          # yes|verbose = show dialog, otherwise don't show dialog
    local waitrounds="$2"       # try max $waitrounds times for a connection, test once per $onewait
    local onewait="$3"          # time to wait in one waiting round
    local caller="$4"           # who is calling this function (often empty)
    local ix
    local title="Warning"
    local checker="ping -c 1 8.8.8.8"

    case "$EOS_CONNECTION_CHECKER" in
        curl)
            # checker="curl --silent --connect-timeout 8 https://8.8.8.8"
            checker=/usr/bin/eos-connection-checker
            ;;
    esac

    test -z "$verbose"    && verbose=no
    test -z "$waitrounds" && waitrounds=5
    test -z "$onewait"    && onewait=1s

    if [ -n "$caller" ] ; then
        title+=" from $caller"
    fi

    for ((ix=0; ix<waitrounds; ix++)) ; do
        $checker >/dev/null && return 0   # is connected
        sleep $onewait
    done

    $checker >/dev/null || {
        case "$verbose" in
            [yY]*|1|true|TRUE|True|on|enable*|verbose)
                if [ 0 -eq 1 ] ; then
                    echo "No internet connection!" | \
                        eos_yad --text-info --title="$title" \
                                --height=100 --width=300 --justify=center --wrap \
                                --button=yad-quit:1 \
                                --button=" Continue anyway!go-next!Don't stop me now":0
                else
                    eos_notification "dialog-warning" normal 60000 "$caller" "$title" "No internet connection!"
                fi
                ;;
            *)
                return 1
                ;;
        esac
    }
}

eos_yad_GetArgVal() { echo "${1#*=}" ; }

eos_yad_RunCmdTermBashOpt() {  # like eos_yad_RunCmdTermBash, but supports certain options
    local cmd=""
    local prompt=""
    local termopts=""
    local waitopt=""
    local opts
    local retval

    # Handle options for variables cmd ... waitopt.
    opts="$(getopt -o=p:t:w:E --longoptions prompt:,term:,wait:,no-enter-wait --name "${FUNCNAME[0]}" -- "$@")"
    retval=$?
    [ $retval -eq 0 ] || return 1
    eval set -- "$opts"
    while true ; do
        case "$1" in
            --prompt | -p)
                prompt="$2" ; shift ;;
            --term | -t)
                termopts="$2" ; shift ;;        # e.g. --term="-T 'my title' --geometry=100x200"
            --wait | -w)
                waitopt="$2" ; shift ;;         # e.g. --wait="--no-enter-wait"
            --no-enter-wait | -E)
                waitopt="--no-enter-wait" ;;    # alternative to --wait
            --)
                shift; break ;;
        esac
        shift
    done
    cmd="$*"
    [ -n "$cmd" ] || { echo "${FUNCNAME[0]}: warning: required command is missing." >&2; return 1; }

    # Get the available/configured terminal.
    local term; term="$(eos_yad_terminal)"
    test -n "$term" || return 1

    mkdir -p "$HOME/.cache"
    local tmpfile; tmpfile=$(mktemp "$HOME/.cache/${FUNCNAME[0]}.XXXXX")

    echo "#!/bin/bash"                                   >> "$tmpfile"
    test -n "$prompt" && echo "echo $prompt"             >> "$tmpfile"
    echo "$cmd"                                          >> "$tmpfile"
    echo "echo"                                          >> "$tmpfile"
    case "$term" in
        /usr/bin/deepin-terminal | deepin-terminal) ;;
        *)
            _init_translations
            if [ "$waitopt" != "--no-enter-wait" ] ; then
                echo "read -p '$(ltr updt_press_enter): '"    >> "$tmpfile"
            fi
            ;;
    esac
    echo "rm -f $tmpfile"                                >> "$tmpfile"                    # this may cause issues in very special cases!

    chmod +x "$tmpfile"

    # Try make sure terminal $term does not return to the caller immediately
    # but waits until the commands from $tmpfile are executed.
    case "$term" in
        /usr/bin/gnome-terminal | gnome-terminal)
            $term $termopts --wait -- "$tmpfile" ;;
        /usr/bin/xfce4-terminal | xfce4-terminal)
            $term --disable-server $termopts -e "$tmpfile" ;;
        *)
            $term $termopts -e "$tmpfile" ;;
    esac

    # The following DOES NOT WORK with plain gnome-terminal:
    #echo "Deleting '$tmpfile'."
    #rm -f "$tmpfile"
}

eos_yad_RunCmdTermBash() {
    local cmd="$1"
    local prompt="$2"
    local termopts="$3"
    local waitopt="$4"

    eos_yad_RunCmdTermBashOpt --prompt="$prompt" --term="$termopts" --wait="$waitopt" "$cmd"
}

eos_yad_problem() {
    local title="$1"
    shift
    eos_yad --text-info --title="$title" --wrap --image=error \
            --width=700 --height=500 --button=yad-quit:0 "$@"
    # removed --tail
}

eos_yad_DIE() {
    # This function is only for small messages.
    # The local Usage can be used only if it is
    #  - defined before sourcing this file
    #  - exported

    local msg="$1"
    local title="Error"
    shift
    while true ; do
        echo "$msg"
        # run Usage function if available (usually is not ...)
        test -n "$(declare -F | grep -w '^declare -f Usage$')" && Usage
        break
    done | eos_yad_problem "$title" "$@"
    exit 1
}

eos_yad_WARN() {
    local msg="$1"
    local title="Warning"
    shift
    echo "$msg" | eos_yad_problem "$title" --image=dialog-warning "$@"
}

# Function detectDE is copied from: https://cgit.freedesktop.org/xdg/xdg-utils/tree/scripts/xdg-utils-common.in

#--------------------------------------
# Checks for known desktop environments
# set variable DE to the desktop environments name, lowercase

eos_yad__detectDE()
{
    # see https://bugs.freedesktop.org/show_bug.cgi?id=34164
    unset GREP_OPTIONS

    if [ -n "${XDG_CURRENT_DESKTOP}" ]; then
      case "${XDG_CURRENT_DESKTOP}" in
         # only recently added to menu-spec, pre-spec X- still in use
         Budgie*)
           DE=budgie
           ;;
         Cinnamon|X-Cinnamon)
           DE=cinnamon;
           ;;
         DEEPIN|[Dd]eepin)
           DE=deepin;
           ;;
         ENLIGHTENMENT|Enlightenment)
           DE=enlightenment;
           ;;
         # GNOME, GNOME-Classic:GNOME, or GNOME-Flashback:GNOME
         GNOME*|gnome)
           DE=gnome;
           ;;
         KDE)
           DE=kde;
           ;;
         LXDE)
           DE=lxde;
           ;;
         LXQt)
           DE=lxqt;
           ;;
         MATE)
           DE=mate;
           ;;
         XFCE)
           DE=xfce
           ;;
         X-Generic)
           DE=generic
           ;;
         i3)
           DE=i3
           ;;
      esac
    fi

    if [ "$DE" = "" ]; then
      # classic fallbacks
      if [ x"$KDE_FULL_SESSION" != x"" ]; then DE=kde;
      elif [ x"$GNOME_DESKTOP_SESSION_ID" != x"" ]; then DE=gnome;
      elif [ x"$MATE_DESKTOP_SESSION_ID" != x"" ]; then DE=mate;
      elif dbus-send --print-reply --dest=org.freedesktop.DBus /org/freedesktop/DBus org.freedesktop.DBus.GetNameOwner string:org.gnome.SessionManager &>/dev/null ; then DE=gnome;
      elif xprop -root _DT_SAVE_MODE 2> /dev/null | grep ' = \"xfce4\"$' >/dev/null 2>&1; then DE=xfce;
      elif xprop -root 2> /dev/null | grep -i '^xfce_desktop_window' >/dev/null 2>&1; then DE=xfce
      elif echo "$DESKTOP" | grep -q '^Enlightenment'; then DE=enlightenment;
      elif [ x"$LXQT_SESSION_CONFIG" != x"" ]; then DE=lxqt;
      fi
    fi

    if [ "$DE" = "" ]; then
      # fallback to checking $DESKTOP_SESSION
      case "$DESKTOP_SESSION" in
         gnome)
           DE=gnome;
           ;;
         LXDE|Lubuntu)
           DE=lxde; 
           ;;
         MATE)
           DE=mate;
           ;;
         xfce|xfce4|'Xfce Session')
           DE=xfce;
           ;;
         openbox)
             DE=openbox
             ;;
      esac
    fi

    if [ "$DE" = "" ]; then
      # fallback to uname output for other platforms
      case "$(uname 2>/dev/null)" in 
        CYGWIN*)
          DE=cygwin;
          ;;
        Darwin)
          DE=darwin;
          ;;
      esac
    fi

    if [ "$DE" = "gnome" ]; then
        # gnome-default-applications-properties is only available in GNOME 2.x
        # but not in GNOME 3.x
        :
        # which gnome-default-applications-properties > /dev/null 2>&1  || DE="gnome3"        # This is no more needed (?)
    fi

    if [ -f "$XDG_RUNTIME_DIR/flatpak-info" ]; then
      DE="flatpak"
    fi

    if [ -z "$DE" ] ; then
        if [ -x /usr/bin/qtile ] && [ -d /usr/share/doc/qtile ] ; then
            DE="qtile"
        fi
    fi
    if [ -z "$DE" ] ; then
        if eos_IsSway ; then
            DE=sway
        elif eos_IsBspwm ; then
            DE=bspwm
        fi
    fi

    if [ -z "$DE" ] ; then
        # neofetch fails: Enlightenment, openbox
        # neofetch differs: KDE -> plasma (with DESKTOP_SESSION=openbox-kde and DESKTOP_SESSION=plasma)
        [ -x /usr/bin/neofetch ] && DE="$(neofetch --enable de --de_version off | awk '{print $NF}' | tr '[:upper:]' '[:lower:]')"
    fi
}

# These 2 funcs return the DE/WM in upper case letters:
eos_yad_GetDesktopName() {      # return DE name in uppercase letters
    eos_yad__detectDE
    echo "$DE" | tr '[:lower:]' '[:upper:]'
}
eos_GetDeOrWm() { eos_yad_GetDesktopName ; }

eos_IsSway()  {
    case "$DESKTOP_SESSION" in
        sway | */sway) return 0 ;;
    esac
    case "$XDG_SESSION_DESKTOP" in
        sway | */sway) return 0 ;;
    esac
    [ -x /usr/bin/swaybg ] && return 0
    return 1
}

eos_IsBspwm() {
    case "$DESKTOP_SESSION" in
        bspwm | */bspwm) return 0 ;;
    esac
    case "$XDG_SESSION_DESKTOP" in
        bspwm | */bspwm) return 0 ;;
    esac
    [ -x /usr/bin/bspwm ] && return 0
    return 1
}

# DIE()  { eos_yad_DIE  "$@" ; }    # deprecated
# WARN() { eos_yad_WARN "$@" ; }    # deprecated

#SetBrowser() {
#    local xx
#    for xx in xdg-open exo-open firefox chromium ; do  # use one of these browser commands
#        if [ -x /usr/bin/$xx ] ; then
#            _BROWSER=/usr/bin/$xx        # for showing external links
#            return
#        fi
#    done
#    DIE "${FUNCNAME[0]}: cannot find a browser"
#}

eos_yad_nothing_todo() {
    local text="$1"
    local timeout="$2"  # optional, default set below
    local title="$3"    # optional, default set below
    local image="$4"    # optional, default set below

    [ -n "$timeout" ] || timeout=10
    [ -n "$title" ]   || title="Info"
    [ -n "$image" ]   || image=info

    local cmd=(
        eos_yad --form --text="$text" --title="$title" --no-focus
                --height=100 --width=300 --timeout="$timeout" --timeout-indicator=left
                --button=yad-close:0
    )
    "${cmd[@]}"
}


FindAvailableMonoFont() {
    local size="$1"
    local font="Mono"   # fallback

    [ -n "$size" ] || size=10

    if [ -r /usr/share/fonts/liberation/LiberationMono-Regular.ttf ] ; then
        font="Liberation Mono"
    elif [ -r /usr/share/fonts/TTF/DejaVuSansMono.ttf ] ; then
        font"DejaVu Sans Mono"
    elif [ -r /usr/share/fonts/noto/NotoSansMono-Regular.ttf ] ; then
        font="Noto Sans Mono"
    elif [ -r /usr/share/fonts/gsfonts/NimbusMonoPS-Regular.otf ] ; then
        font="Nimbus Mono"
    elif [ -r /usr/share/fonts/adobe-source-code-pro/SourceCodePro-Regular.otf ] ; then
        font="Source Code Pro"
    fi
    echo "$font $size"
}

ProgressBar() {         # This function was converted from the work of @Kresimir, thanks!
    local msg="$1"
    local percent="$2"
    local barlen="$3"
    local c
    local columns="$COLUMNS"                                # nr of columns on the terminal
    [ -n "$columns" ] || columns=80                         # guess nr of columns on the terminal
    local msglen=$((columns - barlen - 9))                  # max space for the msg
    [ "${#msg}" -gt "$msglen" ] && msg="${msg::$msglen}"    # msg must be truncated
    [ "${msg: -1}" = ":" ] || msg+=":"                      # make sure a colon is after msg

    printf "\r%-*s %3d%% [" "$msglen" "$msg" "$percent" >&2
    for ((c = 0; c < barlen; c++)) ; do
        if (( c <= percent * barlen / 100 )); then
            echo -ne "#" >&2
        else
            echo -ne " " >&2
        fi
    done;
    stdbuf -oL printf "]" >&2 # flush stdout
}
ProgressBarInit() {
    # progress bar initialization
    trap 'printf "\x1B[?25h" >&2' EXIT # cursor on
    printf "\x1B[?25l" >&2              # cursor off
}
ProgressBarEnd() {
    printf "\n" >&2
}

YadProgressPulsate() {
    local lockfile="$1"
    local text="$2"

    while true ; do
        [ -r "$lockfile" ] || return
        echo 0
        sleep 0.1s
    done | eos_yad --progress \
                   --title="Progress indicator" \
                   --text="$text" \
                   --auto-close \
                   --width=400 --hide-text --pulsate
}

eos_FormMonoText() {
    local txt="$1"
    local size="$2"   # optional

    [ -n "$size" ] && size=" $size"
    printf "<span font='Mono$size'>%s</span>" "$txt"
}


Wget2Curl() {
    # Convert a wget call to a curl call.
    local opts
    # shellcheck disable=SC2154       # don't complain about undefined $progname
    local _progname="$progname"                                # $progname may come from the user app
    [ -n "$_progname" ] || _progname="$(eos_GetProgName)"

    opts="$(/usr/bin/getopt -o=qO: --longoptions timeout:,user-agent: --name "$_progname" -- "$@")" || {
        PreLog "${FUNCNAME[0]}: option handling failed!"
        return 1
    }

    eval set -- "$opts"

    local cmd=(curl --fail --location)
    local retval=0

    while true ; do
        case "$1" in
            -q)           cmd+=(--silent)  ;;
            -O)           cmd+=(--output "$2"); shift ;;
            --user-agent) cmd+=(--user-agent "$2"); shift ;;
            --timeout)    cmd+=(--max-time "$2"); shift ;;

            --) shift ; break ;;
        esac
        shift
    done

    # [ "$foobar_test" = "yes" ] && echo "${cmd[*]} $*"

    "${cmd[@]}" "$@"

    retval=$?
    #if [ "$foobar_test" = "yes" ] ; then
    #    case "$retval" in
    #        23) echo "==> Write error. Curl could not write data to a local filesystem or similar." ;;
    #        0) ;;
    #        *) echo "==> curl returned $retval." ;;
    #    esac
    #fi
    return $retval
}


# check the config:
case "$EOS_ROOTER" in
    su           | "su -c"          | "/usr/bin/su -c" | "")     export EOS_ROOTER="eos-run-cmd-with-su" ;;          # default!
    sudo         | "sudo bash -c"   | "/usr/bin/sudo bash -c")   export EOS_ROOTER="sudo bash -c" ;;
    pkexec       | "pkexec bash -c" | "/usr/bin/pkexec bash -c") export EOS_ROOTER="/usr/bin/pkexec bash -c" ;;
    su-c_wrapper)                                                export EOS_ROOTER="/usr/bin/su-c_wrapper bash -c" ;;
    *)
        eos_yad_DIE "Error: configuration '$EOS_ROOTER' for EOS_ROOTER in file /etc/eos-script-lib-yad.conf is not supported!"
        ;;
esac
