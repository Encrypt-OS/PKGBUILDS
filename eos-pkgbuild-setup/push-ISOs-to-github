#!/bin/bash

# "Sync" local ISO files (with .sha512sums etc) with github repo.
#
# Note1: ISO files are assumed to be named strictly in ascending order,
#        e.g. using a contant part and a date (in fixed format) in the file name.
#        Otherwise wrong files will be deleted as "old".
#
# Note2: program 'hub' is used, it creates an account token at first run
#        and saves it into the hub config file ~/.config/hub.
#
# Unless you already have the account token, maybe the easiest way to create it
# is to run commands:
#    # assume this github repo is already created!
#    reponame=weekly-ISOs-repo                      # This is the name of the github repo
#                                                   # where the ISOs will be stored.
#                                                   # Note that it may have changed already .
#    git clone https://github.com/Encrypt-OS/$reponame.git
#    cd $reponame
#    hub release
#    If this works no more, you can create the token at github and copy it to he hub config file.
#
#    The file looks like this (note: github.com starts at the beginning of the line):
#
#        github.com:
#        - user: <your-github-username>
#          oauth_token: <your-github-token>
#          protocol: https
#
#   The <your-github-token> starts with:
#        ghp_
#   and contains letters and numbers.
#
#
# Later, to sync the new local ISOs to github, you simply go to this folder
# and run this program.
#
# Note3: config file $HOME/.config/$progname/$progname.conf contains important variables that
#        must be properly set.
#
# Note4: exit codes:
#           0 = success, ISO was built and sent to github
#           1 = failure, see the log file at $HOME/.config/$progname/log.txt for more info
#           2 = need to reboot and then build the ISO (see also the log file)
#
# Note5: file /usr/share/libalpm/hooks/eos-reboot-required.hook from package 'eos-hooks' is required.
#

MSG()  { echo "==> $progname: $1: $2" >&2 ; }                # $1=title $2=msg
DIE()  { MSG error   "$1" ; Options --help-stay; exit 1 ; }
WARN() { MSG warning "$1" ; }
INFO() { MSG info    "$1" ; }

RemoveOldRemotesAndLocals() {
    local re ix=0

    UpdateRemotesInfo

    # remove oldest files and leave no more than $EOS_REMOTE_ISO_MAX_COUNT files
    for ((ix=0; remote_iso_count > EOS_REMOTE_ISO_MAX_COUNT; ix++)) ; do
        re="${remote_iso_files[ix]}"
        Log remove "$re"
        delete-release-assets --quietly $EOS_RELEASE_TAG "$re"  # deletes all remote files starting with name "$re"
        rm -f "$re" "$re".*
        ((remote_iso_count--))
    done
}

Log() {
    local op="$1"
    local file="$2"
    echo "$datetime: $op $file" >> "$logfile"
}

DieLog() {
    local op="$1"
    local file="$2"
    Log "==> $op" "$file"
    DIE "$op $file"
}

WarnLog() {
    local op="$1"
    local file="$2"
    Log "==> $op" "$file"
    WARN "$op $file"
}

SendLogToRemote() {
    add-release-assets --quietly $EOS_RELEASE_TAG "$logfile"
}

CopyLogToLocal() {
    cd "$EOS_UPLOAD_PATH"
    rm -f $(basename "$logfile")
    cp "$logfile" ./
}

ShowOp() {
    local op="$1"
    local file="$2"
    echo "==> $op $file ..." >&2
}

AddNewRemotes() {
    local local_iso_files="$(/usr/bin/ls *.iso 2>/dev/null)"
    local lo re="" xx assets=()

    [ -n "$local_iso_files" ] || DIE "no local ISO files found."

    readarray -t local_iso_files <<< $(echo "$local_iso_files")

    # local files that don't exist on remote will be sent to remote
    for lo in "${local_iso_files[@]}" ; do
        if [ -n "$remote_iso_files" ] ; then
            for re in "${remote_iso_files[@]}" ; do
                [ "$lo" = "$re" ] && break
            done
        fi
        if [ "$lo" != "$re" ] ; then
            if [ $(/usr/bin/stat -c %s "$lo" ) -eq 0 ] ; then
                WARN "ignoring empty file '$lo'."
                continue
            fi
            assets=()
            # local file(s) didn't exist on remote, so push them
            for xx in "$lo" $(ls "$lo".* 2>/dev/null) ; do
                ShowOp push "$xx"
                assets+=("$xx")
            done
            Log upload "$lo"
            add-release-assets --quietly $EOS_RELEASE_TAG "${assets[@]}"     # add all files related to this ISO
        fi
    done
    sleep 1  # give github some time to relax...
}

UpdateRemotesInfo() {
    remote_iso_files="$(release-asset-names "$EOS_RELEASE_TAG" | /usr/bin/grep '\.iso$')"
    if [ -n "$remote_iso_files" ] ; then
        readarray -t remote_iso_files <<< $(echo "$remote_iso_files")
        #remote_iso_count=$(echo "${remote_iso_files[@]}" | wc -l)
        remote_iso_count=${#remote_iso_files[@]}
    else
        INFO "remote ISO files not found."
    fi
    sleep 1  # give github some time to relax...
}

UpdateSystem_or_InformAboutRebootAndStop() {
    local must_reboot=no
    local hook=/usr/share/libalpm/hooks/eos-reboot-required.hook

    [ -f $hook ] || DIE "System file $hook is required. Please install package eos-hooks."

    local updates=$(checkupdates | awk '{print $1}')

    # Update the system and also check if system updates contain packages that require a reboot.

    if [ -n "$updates" ] ; then
        local must_update_pkgs=$(grep "^Target = " $hook | awk '{print $3}')
        local upkg mpkg
        for upkg in $updates ; do
            for mpkg in $must_update_pkgs ; do
                if [ "$upkg" = "$mpkg" ] ; then
                    must_reboot=yes
                    break
                fi
            done
            [ $must_reboot = yes ] && break
        done
        sudo pacman -Syu   # --noconfirm
    fi

    if [ $must_reboot = yes ] ; then
        WARN "Must reboot before building the ISO."
        Log  "Must reboot before building file" ${EOS_ISO_NAME_PREFIX}-${date}-x86_64.iso
        exit 2     # must reboot first, then build the ISO 
    fi
}

CheckVar() {
    local varname="$1"
    [ -n "${!varname}" ] || DIE "variable $varname missing from $configfile."
}

CheckVars() {
    CheckVar "EOS_UPLOAD_PATH"
    CheckVar "EOS_ISO_REPOPATH"
    CheckVar "EOS_RELEASE_TAG"
    CheckVar "EOS_REMOTE_ISO_MAX_COUNT"
    CheckVar "EOS_ISO_NAME_PREFIX"

    cd "$EOS_UPLOAD_PATH"

    [ -z "$isofilename" ] && isofilename=${EOS_ISO_NAME_PREFIX}-${date}-x86_64.iso
    [ -r "$isofilename" ] && DieLog "file '$isofilename' and friends already exist. Remove and try again?"

    [ -d .git ] || DIE "current folder is not a git folder (does not have a .git subfolder)."
    local url_line="$(grep "/Encrypt-OS/$(basename "$EOS_UPLOAD_PATH").git" .git/config)"
    [ -n "$url_line" ] || DIE "current folder's .git/config file has wrong url!"   # didn't find correct path in .git/config

    local def=4 min=1 max=10
    if [ $EOS_REMOTE_ISO_MAX_COUNT -lt 1 ] || [ $EOS_REMOTE_ISO_MAX_COUNT -gt 10 ] ; then
        WARN "EOS_REMOTE_ISO_MAX_COUNT should be $min..$max, was $EOS_REMOTE_ISO_MAX_COUNT, setting it to $def."
        EOS_REMOTE_ISO_MAX_COUNT=$def
    fi
}

Build_the_ISO() {

    # If build succeeds: return 0
    # If build fails:    return 1 or 2

    local retval=0

    # First, do some ad hoc sanity checks about folders, files and configuration.

    [ -d "$EOS_ISO_REPOPATH" ] || DIE "local folder $EOS_ISO_REPOPATH does not exist."
    [ -d "$EOS_UPLOAD_PATH" ] || DIE "local folder $EOS_UPLOAD_PATH does not exist."
    [ "$EOS_UPLOAD_PATH" -ef "$PWD" ] || DIE "ISO build must be done in folder $EOS_UPLOAD_PATH."

    # Preparations for ISO build

    if [ "$interactive" = "yes" ] ; then
        UpdateSystem_or_InformAboutRebootAndStop       # either update system, or inform about mandatory reboot after updating
        sudo pacman --noconfirm -Scc                   # clean up package cache
    fi

    # Building the ISO

    local tmpdir=$(mktemp -d $HOME/.tmpdir.XXXX)
    cp -R "$EOS_ISO_REPOPATH" $tmpdir/
    cd $tmpdir/$(basename "$EOS_ISO_REPOPATH")

    case "$fake" in
        no)
            git pull                                         # make sure it has the latest from github
            sudo ./fix_permissions.sh
            time sudo ./mkarchiso .
            ;;
        yes)
            mkdir -p out
            echo "faked ISO" > out/Encrypt-OS-${date}-x86_64.iso
            ;;
    esac

    local filename="$(/usr/bin/ls out/Encrypt-OS-*.iso 2>/dev/null)"

    if [ -n "$filename" ] ; then
        sudo mv "$filename" "$EOS_UPLOAD_PATH/$isofilename"
        sudo chown $LOGNAME "$EOS_UPLOAD_PATH/$isofilename"
    else
        retval=1
    fi

    # Create check files (.sig .sha512sum .torrent) for the ISO

    cd "$EOS_UPLOAD_PATH"
    sudo rm -rf $tmpdir

    if [ $retval -eq 0 ] ; then
        CreateIsoCheckfiles
    else
        DieLog "Failed to build file" $isofilename
    fi

    return $retval
}

CreateIsoCheckfiles() {

    local web_seed=https://mirror.alpix.eu/Encrypt-OS/iso/$isofilename  # for torrent
    local sum

    # Calculate sha512sum into $isofilename.sha512sum

    sum="$(sha512sum $isofilename)"
    if [ $? -ne 0 ] ; then
        DieLog "failed to create sha512sum for" $isofilename
    fi
    echo "$sum" > $isofilename.sha512sum

    # Sign with gpg into $isofilename.sig

    gpg --default-key info@Encrypt-OS.com --detach-sign --output $isofilename.sig $isofilename || {
        WarnLog "failed to sign" $isofilename
    }

    # Create a torrent file $isofilename.torrent

    mktorrent -p -v \
              --announce=udp://tracker.openbittorrent.com:80 \
              -a udp://tracker.torrent.eu.org:451/announce \
              -a udp://thetracker.org:80/announce \
              -a udp://tracker.dutchtracking.com:6969/announce \
              -a udp://tracker.opentrackr.org:1337/announce \
              -c $isofilename \
              -n $isofilename \
              -o $isofilename.torrent \
              -w $web_seed \
              $isofilename
    [ $? -eq 0 ] || WarnLog "failed to create torrent file for" $isofilename
}

Usage() {
    cat <<EOF >&2

Overview
    This program creates a new ISO file and the additional
    files (.sha512sum, .sig and .torrent) into this folder.

    Then new ISO files will be pushed to Github, and oldest ISO files
    will be deleted if there are more ISO files than \$EOS_REMOTE_ISO_MAX_COUNT (see below).

Tips
    Configuration file $configfile2
    is required to have proper contents for variables:
       Name                           Example value(s)
       ----                           ----------------
       EOS_RELEASE_TAG                test1
       EOS_UPLOAD_PATH                "\$PWD" or "\$HOME/EOS/test-fake-stuff"
       EOS_ISO_REPOPATH               \$EOS_UPLOAD_PATH/../Encrypt-OS-iso-next
       EOS_REMOTE_ISO_MAX_COUNT       4
       EOS_ISO_NAME_PREFIX            Encrypt-OS-weekly

    Run this program in the folder where the local ISO file(s) exist (i.e. \$EOS_UPLOAD_PATH).

    This folder must be git clone'd from the Github repository where the ISO files
    will be stored.
    EOS_RELEASE_TAG refers to the related Github release tag.

EOF
}

Options() {
    local opts
    opts="$(/usr/bin/getopt -o=hi --longoptions fake,help,help-stay,interactive,isoname: --name "$progname" -- "$@")" || {
        Options -h
        return 1
    }
    eval set -- "$opts"

    while true ; do
        case "$1" in
            --fake)
                fake=yes
                ;;
            --interactive | -i)
                interactive=yes
                ;;
            --isoname)                   # use this only if more than one ISO built in a day
                isofilename="$2"
                shift
                ;;

            -h | --help)
                Options --help-stay
                exit 0
                ;;
            --help-stay)                 # internal option only, not for users
                cat <<EOF >&2

Usage: $progname [options]
Options:
  --help | -h             This help.

  --isoname <name>        Set the filename for the ISO file.
                          Useful if more than one ISO file would be built at the same day.

  --fake                  Fake ISO build (is fast to test!).

  --interactive | -i      Interactive mode, updates system packages first.
                          Not meant for unattended use.
EOF
                Usage
                # don't exit!
                ;;
            
            --) shift ; break ;;
        esac
        shift
    done
    if [ -n "$1" ] ; then
        DIE "unrecognized parameters: $*"
    fi
}

Main()
{
    local progname=$(/usr/bin/basename "$0")
    local remote_iso_files
    local remote_iso_count=0
    local date=$(date +%Y.%m.%d)
    local datetime="${date}--$(date +%H:%M:%S)"
    local configfile="$HOME/.config/$progname.conf"
    local configfile2="\$HOME/.config/$progname.conf"
    local logfile="$HOME/.config/$progname.log"
    local fake=no
    local interactive=no
    local isofilename=""                                   # value set in CheckVars

    Options "$@"

    # variables in the $configfile:
    local EOS_RELEASE_TAG=""
    local EOS_UPLOAD_PATH=""
    local EOS_ISO_REPOPATH=""
    local EOS_REMOTE_ISO_MAX_COUNT=4
    local EOS_ISO_NAME_PREFIX=""

    source "$configfile" || DIE "reading config file $configfile failed."

    CheckVars

    Build_the_ISO || return 1

    UpdateRemotesInfo
    AddNewRemotes
    RemoveOldRemotesAndLocals
    SendLogToRemote
    CopyLogToLocal
}

Main "$@"
