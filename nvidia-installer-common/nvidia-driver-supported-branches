#!/bin/bash

# Find the right Nvidia driver for a card.

echo2() { echo "$@" >&2 ; }

DIE() {
    echo2 "$progname: error: $1"
    exit 1
}

GetNvidiaIds()
{
    local version="$1"
    local ids="$(curl -Lsm 10 -o- https://us.download.nvidia.com/XFree86/Linux-x86_64/$version/README/supportedchips.html)"
    local true_series="${version%%.*}"

    [ -n "$ids" ] || DIE "fetcing supported ids for $version failed"

    ids="$(echo "$ids" | sed -n '1,/.*Below are the legacy GPUs that are no longer supported.*/p' | grep '<tr id=')"

    # old (340 series):
    #    <tr id="0x064C">                   # take 064C
    #
    # new (390 ... ):
    #    <tr id="devid17FD_10DE_1173">      # take 17FD
    #    <tr id="devid17FD">                # take 17FD

    if [ -n "$(echo "$ids" | grep 'id="devid')" ] ; then
        ids="$(echo "$ids" | grep '<tr id="devid' | sed 's|.*devid\([0-9A-F]*\)["_].*|\1|')"        # new
    else
        ids="$(echo "$ids" | sed 's|.*id="0x\([0-9A-F]*\)">|\1|')"                                  # old
    fi

    ids=$(echo "$ids" | sort | uniq | tr '[:upper:]' '[:lower:]')
    echo "$true_series|$ids"
}

ShowDriversForId() {
    local id="$1"
    local ix
    local ids
    local ver
    local true_series=""   # found from the Nvidia website

    echo "NVIDIA card id: $id"
    echo "The nvidia-dkms version: $pacman_version"

    for ver in "${nvidia_versions[@]}" ; do
        ids="$(GetNvidiaIds "$ver")"
        true_series="$(echo "$ids" | head -n1 | cut -d'|' -f1)"
        ids="$(echo "$ids" | cut -d'|' -f2)"
        if [ -n "$(echo "$ids" | grep "$id")" ] ; then
            echo "Series $true_series: supported (Nvidia: $ver)"
            [ "$all" = "no" ] && return
        else
            [ "$all" = "yes" ] && echo "Series $true_series: not supported"
        fi
    done
}

GetNvidiaVersions() {
    local versions=$(curl --fail -Lsm 10 -o- "$starting_url" | grep "x86_64/AMD64" | sed 's|<br>|<br>\n|g' | sed 's|.*">\([0-9\.]*\)</a>.*|\1|' | grep -Pv 'AMD64|Archive')
    local s n

    for n in $versions ; do
        for s in "${series_ids[@]}" ; do
            case "$n" in
                $s.*) nvidia_versions+=("$n") ;;
            esac
        done
    done    
}

Options() {
    local opts

    opts="$(/usr/bin/getopt -o=ha --longoptions help,all --name "$progname" -- "$@")" || {
        Options -h
        return 1
    }

    eval set -- "$opts"

    while true ; do
        case "$1" in
            -a | --all)   all=yes ;;

            -h | --help)
                cat <<EOF >&2
Usage: $progname [options] [parameters]

Options:
  -a, --all         Show status for all available driver branches.
  -h, --help        This help.

Parameters:
  card_id           Nvidia card id (4 hex numbers, lower case letters).
                    Example: 1b83
                    Note: card_id is an optional parameter.

Tip: the "card_id" value can be found with command:

  lspci -vnn | grep -P 'VGA|3D|Display' | sed 's|.*\[10de:\([0-9a-f]*\)\].*|\1|'

EOF
                exit 0
                ;;
            
            --) shift ; break ;;
        esac
        shift
    done
    nvidia_id="$1"
}

Main() {
    local progname="$(basename "$0")"
    local all=no
    local nvidia_id=""
    local starting_url="https://www.nvidia.com/en-us/drivers/unix"
    local nvidia_versions=()
    local pacman_version=$(LANG=C pacman -Si nvidia-dkms | grep -w ^Version | awk '{print $NF}')
    local pacman_pkgver=$(echo "$pacman_version" | sed 's|-[0-9.]*$||')
    local pacman_version_series=${pacman_pkgver%%.*}

    Options "$@"

    local series_ids=(
        $pacman_version_series        # latest provided by Arch
        470                           # legacy series ids
        390                           # ditto
    )
    GetNvidiaVersions                 # find versions NVIDIA is currently supporting

    if [ -z "$nvidia_id" ] ; then
        nvidia_id="$(lspci -vnn | grep -P 'VGA|Display|3D' | grep "\[10de:" | sed 's|.*\[10de:\([0-9a-f]*\).*|\1|')"
    fi
    if [ -n "$nvidia_id" ] ; then
        ShowDriversForId "$nvidia_id"
        printf "\nMore info: %s\n\n" "$starting_url"
    fi
}

Main "$@"