#!/bin/bash

echo2() { echo -e "$@" >&2 ; }

indent2() {
    local line="$1"
    echo "$line" | sed 's|^|    |' >&2
}

Msg() {
    local date=$(date "+%Y-%m-%d %H:%M:%S")
    [ "$quiet" = "no" ] && echo2 "$date:" "$@"
}
MsgForce() {
    local quiet_old="$quiet"
    quiet=no
    Msg "$@"
    quiet="$quiet_old"
}
Info() { Msg Info: "$@" ; }
Note() { MsgForce Note: "$@" ; }                 # like Info() but show always
Warn() { MsgForce Warning: "$@" ; }
DIE()  { MsgForce Error: "$@" ; exit 1 ; }

IsInstalled() {
    local pkg="$1"
    case "$(echo "$all_installed_packages" | grep "^$pkg$")" in
        "") return 1 ;;  # not installed
        *)  return 0 ;;  # is installed
    esac
}

IsRepoPkg() {
    local pkg="$1"
    case "$(echo "$repopkgs" | grep "^$pkg$")" in
        "") return 1 ;;
        *)  return 0 ;;
    esac
}

PkgInstall() {
    # prepares installing given packages
    install+=("$@")
}

PkgRemove() {
    # prepares removing given packages if they are installed
    local pkg

    for pkg in "$@" ; do
        if IsInstalled "$pkg" ; then
            remove+=("$pkg")
        fi
    done
}

KeepsAndRemoves() {
    # remove pr_nvidia[] except install[]

    local rp kp

    if [ -z "$install" ] ; then
        PkgRemove "${pr_nvidia[@]}"
    else
        for rp in "${pr_nvidia[@]}" ; do
            if IsInstalled "$rp" ; then
                for kp in "${install[@]}" ; do
                    [ "$rp" = "$kp" ] && break
                done
                if [ "$rp" != "$kp" ] ; then
                    PkgRemove "$rp"
                fi
            fi
        done
    fi

    # remove already installed packages from $install
    local tmp=("${install[@]}")
    install=()
    for kp in "${tmp[@]}" ; do
        if ! IsInstalled "$kp" ; then
            install+=("$kp")
        fi
    done

    # check if install contains any AUR stuff

    local repopkgs="$(pacman -Ssq)"

    for kp in "${install[@]}" ; do
        if ! IsRepoPkg "$kp" ; then
            aurs+=("$kp")               # We don't support AUR packages!
        fi
    done
}

AddCmd() {
    [ -n "$cmd" ] && cmd+="; "
    cmd+="$1"
}

Bumblebee() {
    local user=$(whoami)
    local exec1="Exec=/usr/bin/nvidia-settings"
    local exec2="Exec=optirun -b none /usr/bin/nvidia-settings -c :8"
    local desktop=/usr/share/applications/nvidia-settings.desktop
    local group

    case "$mode" in
        bumblebee)
            PkgInstall bumblebee bbswitch-dkms $p_nvidia $p_nvidia32 xf86-video-intel

            if [ "$user" != "root" ] ; then
                for group in bumblebee video ; do
		    if [ -z "$(id $user | grep "($group)")" ] ; then
			Info "Adding user $user to group: $group"
			AddCmd "gpasswd -a $user $group"
		    fi
                done
            fi
            if [ -n "$(grep "$exec1" $desktop 2>/dev/null)" ] ; then
                Info "Patching $desktop (with optirun)"
                AddCmd "sed -i $desktop -e 's|$exec1|$exec2|'"
            fi
            systemctl status bumblebeed.service >& /dev/null
            case "$?" in
                4)
                    Info "Enabling bumblebeed.service"
                    AddCmd "systemctl enable bumblebeed.service"
                    ;;
            esac
            ;;
        *)
            # remove bumblebee settings
            if [ "$user" != "root" ] ; then
                for group in bumblebee video ; do
                    if [ -n "$(id $user | grep "($group)")" ] ; then
                        Info "Removing user $user from group: $group"
                        AddCmd "gpasswd -d $user $group"
                    fi
                done
            fi
            systemctl status bumblebeed.service >& /dev/null
            case "$?" in
                4) ;;
                *)
                    Info "Disabling bumblebeed.service"
                    AddCmd "systemctl disable bumblebeed.service"
                    ;;
            esac
            ;;
    esac
}

Prime() {
    PkgInstall nvidia-prime $p_nvidia $p_nvidia32 nvidia-hook
    KernelParametersToGrub
}

Nouveau() {
    PkgInstall xf86-video-nouveau
}

OnlyNvidia() {
    if [ "$series" = "$latest_from_arch" ] ; then
        PkgInstall $p_nvidia $p_nvidia32 nvidia-hook
    else
        PkgInstall $p_nvidia $p_nvidia32 # nvidia-hook
    fi
    KernelParametersToGrub
}

KernelParametersToGrub() {
    local file=/boot/grub/grub.cfg
    local param="nvidia-drm.modeset=1"

    if [ -f $file ] ; then
        case "$mode" in
            nvidia | prime)
                if [ -z "$(grep "$param" /etc/default/grub)" ] ; then
                    Info "Patching kernel line with $param"
                    AddCmd "nvidia-installer-kernel-para"
                    AddCmd "grub-mkconfig -o $file"
                fi
                ;;
            *)
                if [ -n "$(grep "$param" /etc/default/grub)" ] ; then
                    Info "Removing kernel parameter $param"
                    AddCmd "nvidia-installer-kernel-para remove"
                    AddCmd "grub-mkconfig -o $file"
                fi
                ;;
        esac
    fi
}

AddConfFileLine() {
    local line="$1"
    local tmp="$(printf "echo %-40s >> $conf_file\n" "'$line'")"
    AddCmd "$tmp"
}

CreateConfFile() {
    if [ "$create_conf" = "yes" ] ; then
        if [ -r $conf_file ] ; then
            Info "File $conf_file already exists, will not overwrite."
            return
        fi
        Info "Creating file $conf_file"
        AddConfFileLine 'Section "Device"'
        AddConfFileLine '    Identifier "Nvidia Card"'
        AddConfFileLine '    Driver "nvidia"'
        AddConfFileLine '    VendorName "NVIDIA Corporation"'
        AddConfFileLine '    Option "NoLogo" "true"'
        AddConfFileLine 'EndSection'
    else
        if [ -r $conf_file ] ; then
            Info "Removing file $conf_file"
            AddCmd "rm -f $conf_file"
        fi
    fi
}

IsNvidiaCard() {
    lspci -k | grep -P 'VGA|3D|Display' | grep NVIDIA >& /dev/null
}

ShowCommandsToRun() {
    echo2 "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    echo2 "COMMANDS TO RUN:"
    local xx
    if [ -n "$cmd" ] ; then
        xx=$(echo "$cmd"  | sed -e 's|; |\n|g')
        indent2 "$xx"
    fi
    echo2 "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"

    [ "$test" = "yes" ] && return 1   # dryrun

    return 0
}

SeparateShortOpts() {
    local opts="$1"
    if [ -n "$opts" ] ; then
        opts=$(echo "$opts" | sed -e 's|:|=|g' -e 's|\([a-zA-Z]\)| -\1|g')
        opts="${opts:1}"
    fi
    echo "$opts"
}

SeparateLongOpts() {
    local opts="$1"
    if [ -n "$opts" ] ; then
        opts=$(echo "$opts" | sed -e 's|:||g' -e 's|,| --|g')
        opts="--$opts"
    fi
    echo "$opts"
}

ListOptions() {
    local sopts="$1"
    local lopts="$2"

    sopts=$(SeparateShortOpts "$sopts")
    lopts=$(SeparateLongOpts "$lopts")
    echo "$lopts $sopts"
}

Options() {
    local opts
    local lopts="32,bumblebee,conf,drivers,force,help,ignore,legacyrepo,listopts,listseries,nouveau,prime,quiet,series:,test,version"
    local sopts="bfhnpqtv"

    opts="$(/usr/bin/getopt -o=$sopts --longoptions $lopts --name "$progname" -- "$@")" || {
        Options -h
        return 1
    }

    eval set -- "$opts"

    while true ; do
        case "$1" in
            -b | --bumblebee) mode=bumblebee ;;
            -n | --nouveau)   mode=nouveau ;;
            -p | --prime)     mode=prime ;;
            -f | --force)     force=yes ;;
            -q | --quiet)     quiet=yes ;;
            -t | --test)      test=yes ;;
            --conf)           create_conf=yes ;;
            --ignore)         ignore_errors=yes ;;
            --legacyrepo)     Setup3rdPartyRepo ;;
            --32)             bit32=yes ;;
            --series)         series="$2" ; shift ;;
            --listopts)       ListOptions "$sopts" "$lopts" ; exit 0 ;;
            --listseries)     echo "$series_now $series_prev1 $series_prev2" ; exit 0 ;;
            --drivers)
                nvidia-driver-supported-branches -a
                exit 0
                ;;
            -v | --version)
                [ -n "$PROGVERSION" ] || PROGVERSION=$(pacman -Q "$progname" | awk '{print $2}')
                echo "$progname $PROGVERSION"
                exit 0
                ;;
            -h | --help)
                cat <<EOF >&2

NOTE: this app is still beta quality!
      Please report any issues to:
      https://forum.Encrypt-OS.com/c/arch-based-related-questions/bug-reports

$progname - help installing Nvidia graphics drivers

Usage: $progname [options]
Options:
  -h, --help              This help.
  -b, --bumblebee         Install bumblebee and Nvidia drivers for optimus cards.
  -f, --force             Force driver installation even if a nvidia card is not detected.
  -n, --nouveau           Install nouveau driver (open source).
  -p, --prime             Install also prime render offload.
  -q, --quiet             Suppress log messages.
  -t, --test              Test mode. Nothing in your system will be modified.
  -v, --version           Show version of this software.
  --32                    Install also support for 32-bit apps.
  --conf                  Create also file $conf_file (might be needed on some systems).
  --drivers               Show supported NVIDIA driver series for your card.
  --ignore                Ignore all errors (useful for testing only).
  --legacyrepo            Add a third party repository for legacy ($series_prev1 and $series_prev2 series) Nvidia drivers.
  --listopts              List options supported by $progname.
  --listseries            List Nvidia driver versions supported by $progname.
  --series                (Advanced) Use the given Nvidia driver version (for testing).
EOF
                exit 0
                ;;
            
            --) shift ; break ;;
        esac
        shift
    done
}

Setup3rdPartyRepo() {
    if [ -z "$(grep "^\[kernel-lts\]" $pacmanconf )" ] ; then
        Note "Setting up repository [kernel-lts]."
        Note "This repo provides legacy Nvidia drivers and LTS kernels."
        Note "More info: https://wiki.archlinux.org/title/Unofficial_user_repositories#kernel-lts"
        Note "==> Will also update all packages (pacman -Syu) <== !!"

        local tmpfile="$(mktemp $HOME/.$progname.XXXXX)"

        cat $pacmanconf > "$tmpfile" 
        cat <<EOF >> "$tmpfile"

[kernel-lts]
SigLevel = Required
Server = https://repo.m2x.dev/current/\$repo/\$arch
EOF
        local cmds="cp '$tmpfile' $pacmanconf"
        local jonathon_key="76C6E477042BFE985CC220BD9C08A255442FAFF0"
        local result="$(pacman-key --list-keys 2>/dev/null | grep -w $jonathon_key)"
        if [ -z "$result" ] ; then
            cmds+="; pacman-key --keyserver hkps://keyserver.ubuntu.com --recv-keys $jonathon_key"
            cmds+="; pacman-key --lsign-key $jonathon_key"
            cmds+="; pacman -Syu"
        fi

        $EOS_ROOTER "$cmds" || DIE "Setting up repository [kernel-lts] failed."

        Info "Repository [kernel-lts] was added to $pacmanconf."
        rm -f "$tmpfile"
    else
        Info "[kernel-lts] is already set up in $pacmanconf."
    fi
    exit 0
}

AllRemovables() {
    # Find all packages that this program may uninstall and add them to array pr_nvidia.

    pr_nvidia=(
        bumblebee
        bbswitch
        bbswitch-dkms
        xf86-video-nouveau

        # nvidia packages from repos:
        $(pacman -Ssq nvidia | grep -P '^nvidia|^lib32-nvidia' | grep -Pv 'nvidia-inst|-cg-|beta')
    )

    # Note: older Nvidia drivers must come from a configured repo, not from the AUR,
    # Currently we support the [kernel-lts] repo which contains some older Nvidia drivers.

    if [ 0 -eq 1 ] ; then
        # nvidia packages from AUR:
        pr_nvidia+=(
            $(yay -Ssqa nvidia | grep -P '^nvidia|^lib32-nvidia' | grep -P "$series_prev1|$series_prev2")
        )
    fi

    readarray -t pr_nvidia <<< $(printf "%s\n" "${pr_nvidia[@]}" | sort | uniq)
}

ProperNvidiaPackages() {
    # Set proper values for
    # - p_nvidia
    # - p_nvidia32
    # because older nvidia drivers may be needed.

    local finder=nvidia-driver-supported-branches
    if [ -z "$series" ] ; then
        series="$($finder | grep ^Series | awk '{print $2}' | tr -d ':')"
    fi

    case "$series" in
        $latest_from_arch)
            p_nvidia="nvidia-dkms nvidia-utils nvidia-settings"
            p_nvidia32="lib32-nvidia-utils"
            ;;
        $series_prev1 | $series_prev2)
            p_nvidia="nvidia-${series}xx-dkms nvidia-${series}xx-utils nvidia-${series}xx-settings" # no hook!?
            p_nvidia32="lib32-nvidia-${series}xx-utils"
            ;;
        *)
            case "$mode" in
                nouveau) ;;
                *) DIE "Sorry, Nvidia series '$series' is not supported by $progname" ;;
            esac
            ;;
    esac

    if [ "$bit32" = "yes" ] ; then
        if [ -z "$(grep "^\[multilib\]" $pacmanconf)" ] ; then
            # cannot install 32-bit packages if [multilib] repo not active
            DIE "To support 32-bit apps, enable the [multilib] repo in $pacmanconf."
        fi
    else
        p_nvidia32=""
    fi
}

SanityChecks() {
    if [ "$(whoami)" = "root" ] || [ $(id -u) -eq 0 ] ; then
        DIE "This program must be started as a non-root user."
    fi

    #if [ ! -x /usr/bin/nvidia-driver-supported-branches ] ; then
    #    DIE "Sorry, package 'nvidia-installer-common' must be installed"
    #fi

    #if [ ! -x /usr/bin/nvidia-installer-kernel-para ] ; then
    #    DIE "Sorry, package 'nvidia-installer-common' version 3.3.12-1 or newer must be installed"
    #fi

    #local dversion=$(pacman -Q nvidia-installer-dkms | awk '{print $2}')
    #if [ $(vercmp $dversion 3.3.12-1) -lt 0 ] ; then
    #    DIE "Sorry, package 'nvidia-installer-dkms' version must be 3.3.12-1 or newer"
    #fi
}

Main()
{
    # Support only these Nvidia series (must update these values too!).
    # Include:
    # - the latest from Arch
    # - two latest from the kernel-lts repo

    local series_now=510
    local series_prev1=470
    local series_prev2=390

    local progname=nvidia-inst

    local pacmanconf=/etc/pacman.conf
    local mode="nvidia"
    local bumblebee=no
    local force=no
    local nouveau=no
    local prime=no
    local quiet=no
    local test=no
    local create_conf=no
    local bit32=no
    local ignore_errors=no
    local series=""
    local conf_file=/etc/X11/xorg.conf.d/20-nvidia.conf
    local PROGVERSION=""
    local pr_nvidia=()
    local p_nvidia=""
    local p_nvidia32=""
    local install=()
    local remove=()
    local aurs=()        # collect needed AUR packages in this array
    local cmd=""

    source /usr/share/encryptos/scripts/eos-script-lib-yad || return 1

    Options "$@"

    SanityChecks
    local all_installed_packages="$(pacman -Qsq)"

    local latest_from_arch=$(LANG=C pacman -Si nvidia-dkms | grep -w ^Version | awk '{print $3}' | cut -d '.' -f1)
    if [ "$latest_from_arch" != "$series_now" ] ; then
        Warn "Series $series_now is no more the latest in Arch but $latest_from_arch is. Results may not be accurate."
    fi

    AllRemovables

    [ -n "$PROGVERSION" ] || PROGVERSION=$(pacman -Q "$progname" | awk '{print $2}')
    Info "Running: $progname v$PROGVERSION"
    Info "Command line: $progname $*"
    Info "Selected mode: $mode"

    if [ "$force" = "no" ] ; then
        if ! IsNvidiaCard ; then
            echo "$progname: no Nvidia card found."
            [ "$ignore_errors" = "no" ] && exit 0
        fi
    fi

    ProperNvidiaPackages

    # Now all packages in various situations are known.

    Bumblebee  # add or remove bumblebee stuff !!
    case "$mode" in
        bumblebee) ;;
        nouveau)   Nouveau ;;
        prime)     Prime   ;;
        nvidia)    OnlyNvidia ;;
    esac

    KeepsAndRemoves
    CreateConfFile

    if [ -n "$install" ] ; then
        Info "Installing packages: ${install[*]}"
        cmd="pacman -Syuq --noconfirm --noprogressbar --needed ${install[*]}; $cmd"
    fi
    if [ -n "$remove" ] ; then
        Info "Removing packages: ${remove[*]}"
        cmd="pacman -Rs --noconfirm --noprogressbar --nodeps ${remove[*]}; $cmd"
    fi

    ShowCommandsToRun || return 0

    if [ -n "$aurs" ] ; then
        local txt="\n"
        txt+="   Sorry, $progname does not support installing packages from AUR.\n"
        txt+="   Consider using option --legacyrepo first. It adds a third party repo\n"
        txt+="   by @jonathon (see: https://gitlab.com/m2x.dev/kernel-lts/repository).\n\n"
        txt+="   Packages missing from currently configured repositories:\n"
        txt+="       ${aurs[*]}\n"
        txt+="   Bailing out."
        DIE "$txt"
    fi

    # The commands are actually executed here.
    # If AUR packages are involved, the sudo/root password needs to be given twice!

    if [ -n "$cmd" ] ; then
        printf "\n==> NOTE: running the commands may take several minutes...\n\n"
        $EOS_ROOTER "$cmd" && Note "To have the changes in effect, you must reboot the computer."
    fi
}

Main "$@"
